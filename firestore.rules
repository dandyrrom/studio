
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user's role from the 'users' collection
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // USERS: Users can read and update their own profile.
    match /users/{userId} {
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    // PRODUCTS: Anyone can read products. Only suppliers can create/update/delete their own products.
    match /products/{productId} {
      allow read: if isAuthenticated();
      
      function isOwner() {
        return request.auth.uid == resource.data.supplierId;
      }
      
      function isSupplier() {
      	return getUserRole(request.auth.uid) == 'supplier';
      }
      
      function isCreatingOwnProduct() {
      	return request.resource.data.supplierId == request.auth.uid;
      }
      
      allow create: if isAuthenticated() && isSupplier() && isCreatingOwnProduct();
      allow update, delete: if isAuthenticated() && isSupplier() && isOwner();
    }

    // ORDERS: Clients can create their own orders. Clients can read their own orders.
    // Suppliers can read and update status of orders placed for their products.
    match /orders/{orderId} {
      function isClientOwner() {
        return request.auth.uid == request.resource.data.clientId;
      }
      
      function isSupplierForOrder() {
        return request.auth.uid == resource.data.supplierId;
      }
      
      function isClientReadingOwnOrder() {
      	return request.auth.uid == resource.data.clientId;
      }

      allow create: if isAuthenticated() && isClientOwner();
      allow read: if isAuthenticated() && (isClientReadingOwnOrder() || isSupplierForOrder());
      allow update: if isAuthenticated() && isSupplierForOrder() && request.resource.data.keys().hasOnly(['status']);
    }
  }
}
